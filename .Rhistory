"Discharge point", "30km Downstream"))
map <- addProviderTiles(map = map, providers$MtbMap)
map <- map + addProviderTiles(map = map, providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35))
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map = map, providers$Stamen.TonerLines)
map
map <- addMarkers(map = map,
lng = GPS$Longitude, lat = GPS$Latitude,
popup = c("Upstream", "5km Downstream",
"Discharge point", "30km Downstream"))
map
map <- addProviderTiles(map = map, providers$Stamen.TonerLite)
map
knitr::opts_chunk$set(fig.height = 8,
fig.width = 10,
cache=TRUE, # enable caching globally
echo=TRUE) # all code will print to screen
library(XML)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(grid)
library(dataRetrieval) # USGS
library(wesanderson) # pallets
library(zoo)
#library(devtools)
#install_github("NEONScience/NEON-utilities/neonUtilities", dependencies = TRUE)
library(neonUtilities)
library(streamMetabolizer)
library(leaflet)
# Function name:
# Nitratax_XMLtoCSV
# Function description:
# Convert output format from Nitratax sensor (.xml) into .csv file
# Input variable definitions:
# filename = .xml file to be converted, character  string
# sensor = character string of sensor name, will be outputted in .csv file name
# deployDate = start date of sensor operation, YYYY-MM-DD character string
# Outputs:
# .csv file titled "KansasR_Nitratax_<sensor>.csv"
Nitratax_XMLtoCSV <- function(filename, sensor, deployDate){
xmlData <- XML::xmlParse(file = filename)
xmlData <- XML::xmlToDataFrame(xmlData, homogeneous = F, stringsAsFactors = F)
xmlData <- xmlData[-(1:6),] # taking out text at top of dataframe
for (count in 1:length(xmlData)){
names(xmlData)[count] <- as.character(xmlData[1,count])
}
xmlData <- xmlData[-1,] # taking out character rows
xmlData <- xmlData[,-1] # taking out first blank column
xmlData$`  TIME  ` <- lubridate::as_datetime(xmlData$`  TIME  `,
tz = "America/Chicago",
format = "%m/%d/%Y %H:%M:%S")
xmlData$`  NITRATE CONC.  ` <- as.numeric(xmlData$`  NITRATE CONC.  `)
xmlData$`  ER  ` <- as.numeric(xmlData$`  ER  `)
xmlData$`  EM  ` <- as.numeric(xmlData$`  EM  `)
xml_trunkated <- xmlData[xmlData$`  TIME  `>ymd(deployDate),] # subset only data from deploy onwards
xml_trunkated <- data.frame(xml_trunkated$`  TIME  `,
xml_trunkated$`  NITRATE CONC.  `)
names(xml_trunkated) <- c("Date and time", "Nitrate plus nitrite as mg-N/L")
CSV_filename <- paste("KansasR_Nitratax_",
sensor,
".csv", sep = "")
write.table(xml_trunkated,
file = CSV_filename,
sep = ",", row.names = FALSE)
return(xml_trunkated)
}
# Variable descriptions:
# loadfromCSV = logical vector, if TRUE data will be loaded from .csv files
# if FALSE data will be converted from .xml to .csv
# (computationally much faster to load from .csv)
# bowersock_N = Nitratax sensor located at the bowersock dam upstream of waste release
# eric_N = Nitratax sensor located at the waste release point
# steve_N = Nitratax sensor located about ~5 miles downstream of bowersock
loadfromCSV <- TRUE
if (loadfromCSV == TRUE){
bowersock_N <- read.csv(file = "KansasR_Nitratax_Bowersock.csv",
header = TRUE,
colClasses = c("POSIXct", "numeric"))
eric_N <- read.csv(file = "KansasR_Nitratax_Eric.csv",
header = TRUE,
colClasses = c("POSIXct", "numeric"))
steve_N <- read.csv(file = "KansasR_Nitratax_Steve.csv",
header = TRUE,
colClasses = c("POSIXct", "numeric"))
names(bowersock_N) <- c("Date and time", "Nitrate plus nitrite as mg-N/L")
names(eric_N) <- c("Date and time", "Nitrate plus nitrite as mg-N/L")
names(steve_N) <- c("Date and time", "Nitrate plus nitrite as mg-N/L")
cat("data loaded from .csv file")
}
if (loadfromCSV == FALSE) {
bowersock_N <- Nitratax_XMLtoCSV(filename = "NITRATAX_Bowersock_Pulled04-13-2018.xml",
sensor = "Bowersock",
deployDate = "2018-01-13")
eric_N <- Nitratax_XMLtoCSV(filename = "NITRATAX_Eric_Pulled04-13-2018.xml",
sensor = "Eric",
deployDate = "2018-02-19")
steve_N <- Nitratax_XMLtoCSV(filename = "NITRATAX_Steve_Pulled04-20-2018.xml",
sensor = "Steve",
deployDate = "2018-01-31")
cat("data loaded from .xml file")
}
if (loadfromCSV == FALSE){
# Eric sensor was buried under sediment from 05-Mar to 15-Mar, setting these measurements to NA
dateSedimentStartEric <- lubridate::as_datetime("2018-03-05 11:00:00")
dateSedimentEndEric <- lubridate::as_datetime("2018-03-15 00:00:00")
eric_N$`Nitrate plus nitrite as mg-N/L`[eric_N$`Date and time` >= dateSedimentStartEric
&
eric_N$`Date and time` <= dateSedimentEndEric] <- NA
# Setting Steve to NA for all measurements of "0", due to sediment issues
steve_N$`Nitrate plus nitrite as mg-N/L`[steve_N$`Nitrate plus nitrite as mg-N/L` <= 0] <- NA
# Setting Steve to NA during time period of sediment burial
dateSedimentStartSteve <- lubridate::as_datetime("2018-03-12 15:00:00")
dateSedimentEndSteve <- lubridate::as_datetime("2018-03-27 11:30:00")
steve_N$`Nitrate plus nitrite as mg-N/L`[steve_N$`Date and time`>=dateSedimentStartSteve
&
steve_N$`Date and time`<=dateSedimentEndSteve] <- NA
}
steve_DO <- read.table(file = "miniDOT_Steve_Pulled04-20-2018.txt", header = TRUE,
sep = ",", skip = 8, stringsAsFactors = FALSE,
colClasses = c("numeric", "POSIXct", "POSIXct", "numeric",
"numeric", "numeric", "numeric", "numeric"),
col.names = c("unixTimestamp", "time_UTC", "time_CST", "battery_V",
"temp_C", "DO_mgL", "DO_sat", "Q"))
eric_DO <- read.table(file = "miniDOT_Eric_Pulled04-04-2018.txt", header = TRUE,
sep = ",", skip = 8, stringsAsFactors = FALSE,
colClasses = c("numeric", "POSIXct", "POSIXct", "numeric",
"numeric", "numeric", "numeric", "numeric"),
col.names = c("unixTimestamp", "time_UTC", "time_CST", "battery_V",
"temp_C", "DO_mgL", "DO_sat", "Q"))
siteNoDesoto <- "06892350" # USGS code for Kansas River site at Desoto, KS
pCode <- c("99133", "00060", "00065", "00300", "00301","00010")
# USGS parameter codes:
# 99133 = nitrate + nitrite [mg-N/L]
# 00060 = discharge [cfs]
# 00065 = gage height [ft]
# 00300 = dissolved oxygen [mg/L]
# 00301 = dissolved oxygen [% saturation]
# 00010 = water temperature [C]
pullBegin <- as.POSIXct("2018-02-01", format = "%Y-%m-%d") # Date for start of data pull
pullEnd <- as.POSIXct("2018-04-22", format = "%Y-%m-%d") # Date for end of data pull
# USGS data pull
desoto <- readNWISuv(siteNumbers = siteNoDesoto, parameterCd = pCode,
startDate = pullBegin, endDate = pullEnd, tz = "America/Chicago")
siteNoLawrence <- "06891080"
pCodesLawrence <- c("00060","00065")
lawrence <- readNWISuv(siteNumbers = siteNoLawrence, parameterCd = pCodesLawrence,
startDate = pullBegin, endDate = pullEnd, tz = "America/Chicago")
# Rename columns from codes to parameter names
desoto <- renameNWISColumns(desoto)
# Fix remaining names that are still parameter codes
names(desoto)[names(desoto)=="00301_Inst"] <- "DO_percentsat"
names(desoto)[names(desoto)=="00301_Inst_cd"] <- "DO_percentsat_cd"
names(desoto)[names(desoto)=="99133_Inst"] <- "nitrateNitrite"
names(desoto)[names(desoto)=="99133_Inst_cd"] <- "nitrateNitrite_cd"
# Convert from American to SI units
# cubic foot per second to liters per second
ft3s_m3s <- function(ft3s){
m3s <- ft3s*0.0283168
return(m3s)
}
# foot to meters
ft_m <- function(ft){
m <- 0.3048*ft
return(m)
}
desoto$Flow_Inst <- ft3s_m3s(desoto$Flow_Inst)
desoto$GH_Inst <- ft_m(desoto$GH_Inst)
# Rename columns from codes to parameter names
lawrence <- renameNWISColumns(lawrence)
# convert from american to SI units
lawrence$Flow_Inst <- ft3s_m3s(lawrence$Flow_Inst)
lawrence$.Downstream.of.Bowersock.Dam._GH_Inst <- ft_m(lawrence$.Downstream.of.Bowersock.Dam._GH_Inst)
lawrence$.Upstream.of.Bowersock.Dam._GH_Inst <- ft_m(lawrence$.Upstream.of.Bowersock.Dam._GH_Inst)
FarmlandPumpingLogs <- read.csv(file = "FarmlandDailyReport_MCKformatted.csv",
header = TRUE, sep = ",")
# conversion from american to metric units
# million gallons to liters
MG_L <- function(MG){
L <- MG*3.78541*10^6
return(L)
}
FarmlandPumpingLogs$VolumePumped_MG <- MG_L(FarmlandPumpingLogs$VolumePumped_MG)
names(FarmlandPumpingLogs)[names(FarmlandPumpingLogs) == "VolumePumped_MG"] <- "VolumePumped_L"
# gallons per minute to liters per second
gpm_m3s <- function(gpm){
m3s <- gpm*6.309E-5
return(m3s)
}
FarmlandPumpingLogs$flowRate_Outfall001A_gpm <- gpm_m3s(FarmlandPumpingLogs$flowRate_Outfall001A_gpm)
names(FarmlandPumpingLogs)[names(FarmlandPumpingLogs) == "flowRate_Outfall001A_gpm"] <-
"flowRate_Outfall001A_m3.s"
FarmlandPumpingLogs$flowRate_AveragePump_gpm <- gpm_m3s(FarmlandPumpingLogs$flowRate_AveragePump_gpm)
names(FarmlandPumpingLogs)[names(FarmlandPumpingLogs) == "flowRate_AveragePump_gpm"] <-
"flowRate_AveragePump_m3.s"
# Reformatting column data types
FarmlandPumpingLogs$Date <- mdy(FarmlandPumpingLogs$Date)
FarmlandPumpingLogs$Notes <- as.character(FarmlandPumpingLogs$Notes)
downloadNEONfiles <- FALSE
if (downloadNEONfiles == TRUE){
dir.create(paste0(getwd(), "/NEONfiles"))
getPackage(dpID = "DP1.00024.001", site_code = "UKFS",
year_month = "2018-02", package = "basic",
savepath = paste(getwd(), "NEONfiles", sep = "/")) # Feb at KU field station
getPackage(dpID = "DP1.00024.001", site_code = "UKFS",
year_month = "2018-03", package = "basic",
savepath = paste(getwd(), "NEONfiles", sep = "/")) # March at KU field station
#getPackage(dpID = "DP1.00024.001", site_code = "UKFS",
#year_month = "2018-04", package = "basic",
#savepath = getwd()) # April at KU field station - wont be released until end of april
stackByTable(dpID = "DP1.00024.001",
filepath = paste0(getwd(), "/NEONfiles"),
savepath = paste0(getwd(), "/NEONfiles"),
folder = TRUE)
}
PAR <- read.csv(file = paste0(getwd(), "/NEONfiles", "/stackedFiles",
"/PARPAR_30min.csv"), header = TRUE)
# data cleanup
PAR <- PAR[,-c(1:4, 6, 11:22)] #drop unneccess columns
PAR$startDateTime <- ymd_hms(PAR$startDateTime)
tz(PAR$startDateTime) <- "America/Chicago"
#subset data frames
desoto_sub <- data.frame(desoto$dateTime, desoto$Flow_Inst)
names(desoto_sub) <- c("dateTime", "Flow_Inst")
desoto_sub$dateTime <- ymd_hms(desoto_sub$dateTime)
lawrence_sub <- data.frame(lawrence$dateTime, lawrence$Flow_Inst)
names(lawrence_sub) <- c("dateTime", "Flow_Inst")
lawrence_sub$dateTime <- ymd_hms(lawrence_sub$dateTime)
# combine data frames
waterBal <- merge(desoto_sub, lawrence_sub,
by = "dateTime", suffixes = c(".desoto", ".lawrence"))
#calculate difference between downstream and upstream gauge (balance = downstream discharge - upstream)
waterBal$difference <- waterBal$Flow_Inst.desoto - waterBal$Flow_Inst.lawrence
# plotting flow at upstream and downstream locations on same time series graph
ggplot() +
geom_line(data = desoto, aes(x = dateTime, y = Flow_Inst, color = "Desoto")) +
geom_line(data = lawrence, aes(x = dateTime, y = Flow_Inst, color = "Lawrence"))
# plot the water balance graph centered on 0:
# positive values = gaining stream
# negative values = losing stream
waterBal_plot <- ggplot() +
geom_line(data = waterBal,
aes(x = dateTime, y = difference, color = "difference"),
show.legend = FALSE, size = 1,
color = wes_palette(n=5, name="Zissou")[1]) +
geom_hline(aes(yintercept = mean(na.omit(waterBal$difference))),
color = wes_palette(n=5, name="Zissou")[5],
linetype = "dashed", size = 1) +
coord_cartesian(xlim = c(pullBegin, pullEnd),
ylim = c(-50, 50)) +
labs(y = "Difference between downstream
flow gauge and upstream
flow gauge, m3/s",
x = "Date",
title = "Water balance of study reach") +
theme_classic()
waterBal_plot
nitrataxMergedPlot <- ggplot(NULL) +
geom_point(data = bowersock_N, aes(x = `Date and time`,
y = `Nitrate plus nitrite as mg-N/L`,
color = "Upstream"), show.legend = TRUE, size = 1) +
geom_point(data = steve_N, aes(x = `Date and time`,
y = `Nitrate plus nitrite as mg-N/L`,
color = "Downstream"), show.legend = TRUE, size = 1) +
geom_point(data = eric_N, aes(x = `Date and time`,
y = `Nitrate plus nitrite as mg-N/L`,
color = "Discharge point"), show.legend = TRUE, size = 1) +
geom_point(data = desoto, aes(x = dateTime,
y = nitrateNitrite, color = "Far downstream"),
show.legend = TRUE, size = 1) +
coord_cartesian(xlim = c(pullBegin, pullEnd), ylim = c(0, 25), expand = TRUE) +
labs(y = "Nitrate plus nitrite [mg-N/L]", x = "Date", title = "", color = "Legend") +
theme_classic() +
theme(legend.position = "right", legend.direction = "vertical") +
View(PAR)
scale_color_manual(values=wes_palette(n=4, name="Darjeeling"))
View(PAR)
nitrataxMergedPlot
# Function name:
# simplePlot
# Function description:
# function to output a simple plot from specified input variables
# Input variable definitions:
# dataset = the time series dataset from which the plot will be generated, dataframe
# xAxis = variable to be plotted on the x axis, POSIXct format
# yAxis = variable to be plotted on the y axis, numeric
# plotBegin = date that plot should start, POSIXct format
# plotEnd = date that plot should end, POSIXct format
# yMin = minimum value of y axis, numeric
# yMax = maximum value of y axis, numeric
# yLabel = desired label of y axis, character string
# xLabel = desired label of x axis, character string
# title = desired title of plot, character string
# Outputs:
# time series plot
simplePlot <- function(dataset, xAxis, yAxis, plotBegin, plotEnd, yMin, yMax, xLabel, yLabel, title){
ggplot(NULL) +
geom_point(data = dataset, aes(x = xAxis, y = yAxis, color = title),
show.legend = FALSE, size = 1) +
coord_cartesian(xlim = c(plotBegin, plotEnd),
ylim = c(yMin, yMax)) +
labs(y = yLabel, x = xLabel, title = title) +
theme_classic()
}
bowersockPlot_N <- simplePlot(dataset = bowersock_N,
xAxis = bowersock_N$`Date and time`,
yAxis = bowersock_N$`Nitrate plus nitrite as mg-N/L`,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = "Date",
yMin = 0, yMax = 1.5,
yLabel = "Nitrate plus nitrite [mg-N/L]",
title = "Upstream") +
scale_color_manual(values=wes_palette(n=5, name="Darjeeling")[1])
bowersockPlot_N
LogDateStart <- min(FarmlandPumpingLogs$Date)
LogDateEnd <- max(FarmlandPumpingLogs$Date)
pullBegin1 <- ymd(pullBegin)
pullEnd1 <- ymd(pullEnd)
FarmlandPump_DrainageDitch_NitratePlot <- ggplot(data = FarmlandPumpingLogs,
aes(Date, Downstream_1625RdDitch_NitrateNitrite_mgN.L)) +
geom_line(show.legend = FALSE, size = 1,
color = wes_palette(n=5, name="Royal2")[5]) +
coord_cartesian(xlim = c(LogDateStart, LogDateEnd), ylim = c(0, 700)) +
labs(y = "Nitrate plus nitrite [mg-N/L]", x = "Date",
title = "Farmland pipe outflow") +
theme_classic() + scale_color_manual(values=wes_palette(n=5, name="Darjeeling")[1])
FarmlandPump_DrainageDitch_NitratePlot
FarmlandPump_DrainageDitch_NitratePlot_zoom <- ggplot(data = FarmlandPumpingLogs,
aes(Date, Downstream_1625RdDitch_NitrateNitrite_mgN.L)) +
geom_point(show.legend = FALSE, size = 1,
color = wes_palette(n=5, name="Royal2")[5]) +
coord_cartesian(xlim = c(pullBegin1, pullEnd1), ylim = c(0, 700)) +
labs(y = "Nitrate plus nitrite [mg-N/L]", x = "Date",
title = "Farmland pipe outflow") +
theme_classic() + scale_color_manual(values=wes_palette(n=5, name="Darjeeling")[1])
FarmlandPump_DrainageDitch_NitratePlot_zoom
ericPlot_N <- simplePlot(dataset = eric_N,
xAxis = eric_N$`Date and time`,
yAxis = eric_N$`Nitrate plus nitrite as mg-N/L`,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = NULL,
yMin = 0, yMax = 20, yLabel = "Nitrate plus nitrite [mg-N/L]",
title = "Discharge point") +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[1])
ericPlot_DO <- simplePlot(dataset = eric_DO,
xAxis = eric_DO$time_CST,
yAxis = eric_DO$DO_mgL,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = NULL,
yMin = 0, yMax = 20, yLabel = "Dissolved oxygen [mg/L]",
title = "Discharge point") +
theme(plot.title = element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[2])
ericPlot_temp <- simplePlot(dataset = eric_DO,
xAxis = eric_DO$time_CST,
yAxis = eric_DO$temp_C,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = "Date",
yMin = -5, yMax = 25, yLabel = "Temperature [C]",
title = "Discharge point") +
theme(plot.title = element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[3])
grid.arrange(ericPlot_N, ericPlot_DO, ericPlot_temp, ncol = 1, nrow = 3)
# Steve (downstream)
stevePlot_N <- simplePlot(dataset = steve_N,
xAxis = steve_N$`Date and time`,
yAxis = steve_N$`Nitrate plus nitrite as mg-N/L`,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = NULL,
yMin = 0, yMax = 1.5, yLabel = "Nitrate plus nitrite [mg-N/L]",
title = "Downstream (5 km)") +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[1])
stevePlot_DO <- simplePlot(dataset = steve_DO,
xAxis = steve_DO$time_CST,
yAxis = steve_DO$DO_mgL,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = NULL,
yMin = 0, yMax = 20, yLabel = "Dissolved oxygen [mg/L]",
title = "Downstream (5 km)") +
theme(plot.title = element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[2])
stevePlot_temp <- ericPlot_temp <- simplePlot(dataset = steve_DO,
xAxis = steve_DO$time_CST,
yAxis = steve_DO$temp_C,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = "Date",
yMin = -5, yMax = 25, yLabel = "Temperature [C]",
title = "Downstream (5 km)") +
theme(plot.title = element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[3])
grid.arrange(stevePlot_N, stevePlot_DO, stevePlot_temp, ncol = 1, nrow = 3)
desotoPlot_N <- simplePlot(dataset = desoto,
xAxis = desoto$dateTime,
yAxis = desoto$nitrateNitrite,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = NULL,
yMin = 0, yMax = 1.5, yLabel = "Nitrate plus nitrite [mg-N/L]",
title = "Far downstream (30 km)") +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[1])
desotoPlot_DO <- simplePlot(dataset = desoto,
xAxis = desoto$dateTime,
yAxis = desoto$DO_Inst,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = NULL,
yMin = 0, yMax = 20, yLabel = "Dissolved oxygen [mg/L]",
title = "Far downstream (30 km)") +
theme(plot.title = element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[2])
desotoPlot_temp <- simplePlot(dataset = desoto,
xAxis = desoto$dateTime,
yAxis = desoto$Wtemp_Inst,
plotBegin = pullBegin, plotEnd = pullEnd, xLabel = "Date",
yMin = -5, yMax = 25, yLabel = "Temperature [C]",
title = "Far downstream (30 km)") +
theme(plot.title = element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="Darjeeling")[3])
grid.arrange(desotoPlot_N, desotoPlot_DO, desotoPlot_temp, ncol = 1, nrow = 3)
Period1Start <- mdy_hms("02-03-2018 12:00:00")
Period1End <- mdy_hms("02-06-2018 12:00:00")
# Grid arrange bowersock for time period #1
bowersockPlot_Period1 <- grid.arrange(
bowersockPlot_N +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,1.25)),
ggplot(NULL),
ncol = 1,
nrow = 3
)
# Grid arrange Eric for time period #1
ericPlot_Period1 <- grid.arrange(
ericPlot_N +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,1.25)),
ericPlot_DO +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,30)),
ericPlot_temp +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,20)),
ncol = 1,
nrow = 3
)
# Grid arrange Steve for time period #1
stevePlot_Period1 <- grid.arrange(
stevePlot_N +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,1.25)),
stevePlot_DO +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,30)),
stevePlot_temp +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,20)),
ncol = 1,
nrow = 3
)
# Grid arrange Desoto for time period #1
desotoPlot_Period1 <- grid.arrange(
desotoPlot_N +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,1.25)),
desotoPlot_DO +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,30)),
desotoPlot_temp +
coord_cartesian(xlim = c(Period1Start,Period1End),
ylim = c(0,20)),
ncol = 1,
nrow = 3
)
grid.arrange(bowersockPlot_Period1,
ericPlot_Period1,
stevePlot_Period1,
desotoPlot_Period1,
ncol = 4,
nrow = 1,
widths = c(1,1,1,1),
top = "Time Period 1: Feb 3-6"
)
Period2Start <- mdy_hms("02-20-2018 12:00:00")
Period2End <- mdy_hms("02-22-2018 12:00:00")
# Grid arrange bowersock for time period #2
bowersockPlot_Period2 <- grid.arrange(
bowersockPlot_N +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,1.5)),
ggplot(NULL),
ncol = 1,
nrow = 3
)
# Grid arrange Eric for time period #2
ericPlot_Period2 <- grid.arrange(
ericPlot_N +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,7)),
ericPlot_DO +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,30)),
ericPlot_temp +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,20)),
ncol = 1,
nrow = 3
)
# Grid arrange Steve for time period #2
stevePlot_Period2 <- grid.arrange(
stevePlot_N +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,1.5)),
stevePlot_DO +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,30)),
stevePlot_temp +
coord_cartesian(xlim = c(Period2Start,Period2End),
ylim = c(0,20)),
ncol = 1,
nrow = 3
)
plot(PAR$PARMean)
