knitr::opts_chunk$set(fig.height = 8,
fig.width = 10,
cache=TRUE, # enable caching globally
echo=TRUE) # all code will print to screen
library(XML)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(grid)
library(dataRetrieval) # USGS
library(wesanderson) # pallets
library(zoo)
#library(devtools)
#install_github("NEONScience/NEON-utilities/neonUtilities", dependencies = TRUE)
library(neonUtilities)
library(streamMetabolizer)
# Function name:
# Nitratax_XMLtoCSV
# Function description:
# Convert output format from Nitratax sensor (.xml) into .csv file
# Input variable definitions:
# filename = .xml file to be converted, character  string
# sensor = character string of sensor name, will be outputted in .csv file name
# deployDate = start date of sensor operation, YYYY-MM-DD character string
# Outputs:
# .csv file titled "KansasR_Nitratax_<sensor>.csv"
Nitratax_XMLtoCSV <- function(filename, sensor, deployDate){
xmlData <- XML::xmlParse(file = filename)
xmlData <- XML::xmlToDataFrame(xmlData, homogeneous = F, stringsAsFactors = F)
xmlData <- xmlData[-(1:6),] # taking out text at top of dataframe
for (count in 1:length(xmlData)){
names(xmlData)[count] <- as.character(xmlData[1,count])
}
xmlData <- xmlData[-1,] # taking out character rows
xmlData <- xmlData[,-1] # taking out first blank column
xmlData$`  TIME  ` <- lubridate::as_datetime(xmlData$`  TIME  `,
tz = "America/Chicago",
format = "%m/%d/%Y %H:%M:%S")
xmlData$`  NITRATE CONC.  ` <- as.numeric(xmlData$`  NITRATE CONC.  `)
xmlData$`  ER  ` <- as.numeric(xmlData$`  ER  `)
xmlData$`  EM  ` <- as.numeric(xmlData$`  EM  `)
xml_trunkated <- xmlData[xmlData$`  TIME  `>ymd(deployDate),] # subset only data from deploy onwards
xml_trunkated <- data.frame(xml_trunkated$`  TIME  `,
xml_trunkated$`  NITRATE CONC.  `)
names(xml_trunkated) <- c("Date and time", "Nitrate plus nitrite as mg-N/L")
CSV_filename <- paste("KansasR_Nitratax_",
sensor,
".csv", sep = "")
write.table(xml_trunkated,
file = CSV_filename,
sep = ",", row.names = FALSE)
return(xml_trunkated)
}
# Variable descriptions:
# loadfromCSV = logical vector, if TRUE data will be loaded from .csv files
# if FALSE data will be converted from .xml to .csv
# (computationally much faster to load from .csv)
# bowersock_N = Nitratax sensor located at the bowersock dam upstream of waste release
# eric_N = Nitratax sensor located at the waste release point
# steve_N = Nitratax sensor located about ~5 miles downstream of bowersock
loadfromCSV <- TRUE
if (loadfromCSV == TRUE){
